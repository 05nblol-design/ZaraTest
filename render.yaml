# Render.com Deploy Configuration
# Zara Quality System - Sistema de Controle de Qualidade

services:
  - type: web
    name: zara-quality-system
    env: node
    plan: free
    region: oregon  # us-west-1 (mais pr√≥ximo do Brasil)
    buildCommand: |
      echo "üîß Iniciando build do Zara Quality System..."
      echo "üåç NODE_ENV: $NODE_ENV"
      echo "üìÅ Diret√≥rio atual: $(pwd)"
      echo "üîß Node.js version: $(node --version)"
      echo "üì¶ NPM version: $(npm --version)"
      
      # Instalar depend√™ncias do backend
      echo "üì¶ Instalando depend√™ncias do backend..."
      npm ci --only=production
      echo "‚úÖ Backend dependencies installed"
      
      # Build do frontend
      echo "üîß Building frontend..."
      cd client
      echo "üìÅ Frontend directory: $(pwd)"
      echo "üìã Listing client directory contents:"
      ls -la
      
      # Verificar se package.json existe
      if [ ! -f "package.json" ]; then
        echo "‚ùå ERROR: package.json not found in client directory"
        exit 1
      fi
      
      # Instalar depend√™ncias do frontend (m√©todo simplificado)
      echo "üì¶ Installing frontend dependencies..."
      cd client && npm install --production=false
      
      # Build simplificado e direto
      echo "üèóÔ∏è Building frontend..."
      echo "üìÅ Current directory: $(pwd)"
      
      # Usar npm run build diretamente (mais confi√°vel)
      npm run build && cd ..
      
      # Verifica√ß√£o b√°sica do build
      echo "üîç Checking build output..."
      ls -la client/dist/
      
      if [ ! -f "client/dist/index.html" ]; then
        echo "‚ùå ERROR: Build failed - index.html not found"
        exit 1
      fi
      
      echo "‚úÖ Build completed successfully"
      
      # Copiar arquivos do frontend para diret√≥rio p√∫blico (m√©todo simplificado)
      echo "üìÅ Copying frontend files to public directory..."
      echo "üìÅ Current directory: $(pwd)"
      
      # Criar e copiar diretamente
      mkdir -p public
      cp -r client/dist/* public/
      
      # Verifica√ß√£o simples
      echo "üîç Verifying copy..."
      ls -la public/
      
      if [ ! -f "public/index.html" ]; then
        echo "‚ùå ERROR: Copy failed - index.html not found in public"
        exit 1
      fi
      
      echo "‚úÖ Frontend files copied successfully!"
    startCommand: |
      echo "üöÄ Iniciando Zara Quality System..."
      echo "üìä Modo: $NODE_ENV"
      echo "üåê Porta: $PORT"
      npm start
    healthCheckPath: /
    autoDeploy: true
    
    # Configura√ß√µes de performance
    numInstances: 1
    
    # Configura√ß√µes para WebSocket/Socket.IO
    routes:
      - type: rewrite
        source: /socket.io/*
        destination: /socket.io/$1
    
    # Disco persistente para uploads
    disk:
      name: zara-uploads
      mountPath: /opt/render/project/src/uploads
      sizeGB: 1
    
    # Vari√°veis de ambiente
    envVars:
      # Configura√ß√µes do servidor
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      
      # Configura√ß√µes de log
      - key: LOG_LEVEL
        value: info
      
      # Configura√ß√µes JWT
      - key: JWT_EXPIRES_IN
        value: 24h
      
      # Configura√ß√µes de upload
      - key: MAX_FILE_SIZE
        value: 5242880  # 5MB
      - key: UPLOAD_PATH
        value: ./uploads
      
      # Configura√ß√µes CORS
      - key: CORS_ORIGIN
        value: https://zara-quality-system-2.onrender.com
      
      # URL do Frontend
      - key: FRONTEND_URL
        value: https://zara-quality-system-2.onrender.com
      
      # Configura√ß√µes de cache
      - key: CACHE_TTL
        value: 300  # 5 minutos
      
      # Timezone
      - key: TZ
        value: America/Sao_Paulo
      
      # Configura√ß√µes do sistema de chat
      - key: CHAT_ENABLED
        value: true
      - key: CHAT_MAX_MESSAGES
        value: 100
      - key: CHAT_MESSAGE_TTL
        value: 86400  # 24 horas
      
      # Configura√ß√µes Socket.IO
      - key: SOCKET_IO_ENABLED
        value: true
      - key: SOCKET_IO_CORS_ORIGIN
        value: https://zara-quality-system-2.onrender.com
      - key: SOCKET_IO_TRANSPORTS
        value: websocket,polling
      - key: SOCKET_IO_PING_TIMEOUT
        value: 60000
      - key: SOCKET_IO_PING_INTERVAL
        value: 25000
      
      # Configura√ß√µes do MongoDB Atlas
      - key: MONGODB_URI
        sync: false  # Ser√° definida no painel do Render
      - key: MONGO_URI
        sync: false  # Fallback, ser√° definida no painel do Render
      
      # Configura√ß√µes de seguran√ßa
      - key: JWT_SECRET
        sync: false  # Ser√° definida no painel do Render
      
      # ‚ö†Ô∏è IMPORTANTES: Defina estas vari√°veis no painel do Render:
      # MONGODB_URI - String de conex√£o do MongoDB Atlas
      # MONGO_URI - String de conex√£o do MongoDB Atlas (fallback)
      # JWT_SECRET - Chave secreta para JWT (m√≠nimo 32 caracteres)
      # Exemplo: mongodb+srv://user:pass@cluster.mongodb.net/zaradb
    
    # Headers de seguran√ßa
    headers:
      # Prote√ß√£o contra clickjacking
      - path: /*
        name: X-Frame-Options
        value: DENY
      
      # Prote√ß√£o contra MIME sniffing
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      
      # Pol√≠tica de referrer
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
      
      # Pol√≠tica de permiss√µes
      - path: /*
        name: Permissions-Policy
        value: camera=(), microphone=(), geolocation=()
      
      # Seguran√ßa de transporte
      - path: /*
        name: Strict-Transport-Security
        value: max-age=31536000; includeSubDomains
      
      # Cache para assets est√°ticos
      - path: /css/*
        name: Cache-Control
        value: public, max-age=31536000
      
      - path: /js/*
        name: Cache-Control
        value: public, max-age=31536000
      
      - path: /images/*
        name: Cache-Control
        value: public, max-age=31536000

# Configura√ß√µes adicionais para monitoramento
# (Dispon√≠vel em planos pagos)
# alerts:
#   - type: cpu
#     threshold: 80
#   - type: memory
#     threshold: 80
#   - type: response_time
#     threshold: 5000