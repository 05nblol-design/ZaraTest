# Render.com Deploy Configuration
# Zara Quality System - Sistema de Controle de Qualidade

services:
  - type: web
    name: zara-quality-system
    env: node
    plan: free
    region: oregon  # us-west-1 (mais próximo do Brasil)
    buildCommand: |
      echo "🔧 Iniciando build do Zara Quality System..."
      echo "🌍 Ambiente: $NODE_ENV"
      echo "📁 Diretório raiz: $(pwd)"
      echo "📂 Conteúdo do diretório raiz:"
      ls -la
      echo "📦 Instalando dependências do backend..."
      npm ci --only=production || { echo "❌ Falha ao instalar dependências do backend"; exit 1; }
      echo "✅ Dependências do backend instaladas!"
      echo "🔧 Construindo frontend React..."
      cd client || { echo "❌ Falha ao acessar diretório client"; exit 1; }
      echo "📁 Diretório atual: $(pwd)"
      echo "📂 Conteúdo do diretório client:"
      ls -la
      echo "📦 Instalando dependências do frontend..."
       npm ci || { echo "❌ Falha ao instalar dependências do frontend"; exit 1; }
       echo "✅ Dependências do frontend instaladas!"
       echo "📦 Executando npm run build..."
       npm run build || { echo "❌ Falha no build do frontend"; exit 1; }
       echo "✅ Build do frontend concluído!"
       echo "📁 Verificando se dist foi criado:"
       if [ -d "dist" ]; then echo "✅ Diretório dist existe"; else echo "❌ Diretório dist NÃO existe"; exit 1; fi
       if [ -f "dist/index.html" ]; then echo "✅ index.html encontrado"; else echo "❌ index.html NÃO encontrado"; exit 1; fi
       echo "📂 Conteúdo do diretório dist:"
       ls -la dist/ || { echo "❌ Falha ao listar dist/"; exit 1; }
       echo "📏 Tamanho do index.html:"
       wc -c dist/index.html || echo "❌ Falha ao verificar tamanho do index.html"
       echo "📁 Voltando para diretório raiz..."
       cd ..
       echo "📁 Diretório atual após voltar: $(pwd)"
       echo "📂 Verificando estrutura final:"
       ls -la client/dist/ || echo "❌ Falha ao verificar client/dist/"
       echo "🚀 Build completo - Preparando para deploy..."
    startCommand: |
      echo "🚀 Iniciando Zara Quality System..."
      echo "📊 Modo: $NODE_ENV"
      echo "🌐 Porta: $PORT"
      npm start
    healthCheckPath: /
    autoDeploy: true
    
    # Configurações de performance
    numInstances: 1
    
    # Configurações para WebSocket/Socket.IO
    routes:
      - type: rewrite
        source: /socket.io/*
        destination: /socket.io/$1
    
    # Disco persistente para uploads
    disk:
      name: zara-uploads
      mountPath: /opt/render/project/src/uploads
      sizeGB: 1
    
    # Variáveis de ambiente
    envVars:
      # Configurações do servidor
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      
      # Configurações de log
      - key: LOG_LEVEL
        value: info
      
      # Configurações JWT
      - key: JWT_EXPIRES_IN
        value: 24h
      
      # Configurações de upload
      - key: MAX_FILE_SIZE
        value: 5242880  # 5MB
      - key: UPLOAD_PATH
        value: ./uploads
      
      # Configurações CORS
      - key: CORS_ORIGIN
        value: https://zara-quality-system-2.onrender.com
      
      # URL do Frontend
      - key: FRONTEND_URL
        value: https://zara-quality-system-2.onrender.com
      
      # Configurações de cache
      - key: CACHE_TTL
        value: 300  # 5 minutos
      
      # Timezone
      - key: TZ
        value: America/Sao_Paulo
      
      # Configurações do sistema de chat
      - key: CHAT_ENABLED
        value: true
      - key: CHAT_MAX_MESSAGES
        value: 100
      - key: CHAT_MESSAGE_TTL
        value: 86400  # 24 horas
      
      # Configurações Socket.IO
      - key: SOCKET_IO_ENABLED
        value: true
      - key: SOCKET_IO_CORS_ORIGIN
        value: https://zara-quality-system-2.onrender.com
      - key: SOCKET_IO_TRANSPORTS
        value: websocket,polling
      - key: SOCKET_IO_PING_TIMEOUT
        value: 60000
      - key: SOCKET_IO_PING_INTERVAL
        value: 25000
      
      # Configurações do MongoDB Atlas
      - key: MONGODB_URI
        sync: false  # Será definida no painel do Render
      - key: MONGO_URI
        sync: false  # Fallback, será definida no painel do Render
      
      # Configurações de segurança
      - key: JWT_SECRET
        sync: false  # Será definida no painel do Render
      
      # ⚠️ IMPORTANTES: Defina estas variáveis no painel do Render:
      # MONGODB_URI - String de conexão do MongoDB Atlas
      # MONGO_URI - String de conexão do MongoDB Atlas (fallback)
      # JWT_SECRET - Chave secreta para JWT (mínimo 32 caracteres)
      # Exemplo: mongodb+srv://user:pass@cluster.mongodb.net/zaradb
    
    # Headers de segurança
    headers:
      # Proteção contra clickjacking
      - path: /*
        name: X-Frame-Options
        value: DENY
      
      # Proteção contra MIME sniffing
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      
      # Política de referrer
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
      
      # Política de permissões
      - path: /*
        name: Permissions-Policy
        value: camera=(), microphone=(), geolocation=()
      
      # Segurança de transporte
      - path: /*
        name: Strict-Transport-Security
        value: max-age=31536000; includeSubDomains
      
      # Cache para assets estáticos
      - path: /css/*
        name: Cache-Control
        value: public, max-age=31536000
      
      - path: /js/*
        name: Cache-Control
        value: public, max-age=31536000
      
      - path: /images/*
        name: Cache-Control
        value: public, max-age=31536000

# Configurações adicionais para monitoramento
# (Disponível em planos pagos)
# alerts:
#   - type: cpu
#     threshold: 80
#   - type: memory
#     threshold: 80
#   - type: response_time
#     threshold: 5000