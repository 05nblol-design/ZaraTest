# Render.com Deploy Configuration
# Zara Quality System - Sistema de Controle de Qualidade

services:
  - type: web
    name: zara-quality-system
    env: node
    plan: free
    region: oregon  # us-west-1 (mais pr√≥ximo do Brasil)
    buildCommand: |
      echo "üîß Iniciando build do Zara Quality System..."
      echo "üåç NODE_ENV: $NODE_ENV"
      echo "üìÅ Diret√≥rio atual: $(pwd)"
      
      # Instalar depend√™ncias do backend
      echo "üì¶ Instalando depend√™ncias do backend..."
      npm ci --only=production
      echo "‚úÖ Backend dependencies installed"
      
      # Build do frontend
      echo "üîß Building frontend..."
      cd client
      echo "üìÅ Frontend directory: $(pwd)"
      
      # Instalar depend√™ncias do frontend (incluindo devDependencies para build)
      echo "üì¶ Installing frontend dependencies..."
      npm ci --include=dev
      echo "‚úÖ Frontend dependencies installed"
      
      # Executar build
      echo "üèóÔ∏è Running build..."
      npm run build
      echo "‚úÖ Frontend build completed"
      
      # Verificar se build foi bem-sucedido
      if [ ! -d "dist" ]; then
        echo "‚ùå ERROR: dist directory not created"
        exit 1
      fi
      
      if [ ! -f "dist/index.html" ]; then
        echo "‚ùå ERROR: index.html not found in dist"
        exit 1
      fi
      
      echo "‚úÖ Build verification passed"
      echo "üìÇ Dist contents:"
      ls -la dist/
      
      # Copiar arquivos do frontend para diret√≥rio p√∫blico
      echo "üìÅ Copying frontend files to public directory..."
      mkdir -p ../public
      
      # Verificar se dist existe e tem conte√∫do
      if [ ! -d "dist" ]; then
        echo "‚ùå ERROR: dist directory does not exist"
        exit 1
      fi
      
      # Copiar todos os arquivos (incluindo ocultos)
      cp -r dist/. ../public/
      
      # Verificar se index.html foi copiado
      if [ ! -f "../public/index.html" ]; then
        echo "‚ùå ERROR: index.html not found in public directory after copy"
        echo "üìÇ Public directory contents:"
        ls -la ../public/
        exit 1
      fi
      
      echo "‚úÖ Frontend files copied to public directory"
      
      # Voltar para diret√≥rio raiz
      cd ..
      echo "üìÇ Public directory contents:"
      ls -la public/
      echo "üöÄ Build process completed successfully"
    startCommand: |
      echo "üöÄ Iniciando Zara Quality System..."
      echo "üìä Modo: $NODE_ENV"
      echo "üåê Porta: $PORT"
      npm start
    healthCheckPath: /
    autoDeploy: true
    
    # Configura√ß√µes de performance
    numInstances: 1
    
    # Configura√ß√µes para WebSocket/Socket.IO
    routes:
      - type: rewrite
        source: /socket.io/*
        destination: /socket.io/$1
    
    # Disco persistente para uploads
    disk:
      name: zara-uploads
      mountPath: /opt/render/project/src/uploads
      sizeGB: 1
    
    # Vari√°veis de ambiente
    envVars:
      # Configura√ß√µes do servidor
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      
      # Configura√ß√µes de log
      - key: LOG_LEVEL
        value: info
      
      # Configura√ß√µes JWT
      - key: JWT_EXPIRES_IN
        value: 24h
      
      # Configura√ß√µes de upload
      - key: MAX_FILE_SIZE
        value: 5242880  # 5MB
      - key: UPLOAD_PATH
        value: ./uploads
      
      # Configura√ß√µes CORS
      - key: CORS_ORIGIN
        value: https://zara-quality-system-2.onrender.com
      
      # URL do Frontend
      - key: FRONTEND_URL
        value: https://zara-quality-system-2.onrender.com
      
      # Configura√ß√µes de cache
      - key: CACHE_TTL
        value: 300  # 5 minutos
      
      # Timezone
      - key: TZ
        value: America/Sao_Paulo
      
      # Configura√ß√µes do sistema de chat
      - key: CHAT_ENABLED
        value: true
      - key: CHAT_MAX_MESSAGES
        value: 100
      - key: CHAT_MESSAGE_TTL
        value: 86400  # 24 horas
      
      # Configura√ß√µes Socket.IO
      - key: SOCKET_IO_ENABLED
        value: true
      - key: SOCKET_IO_CORS_ORIGIN
        value: https://zara-quality-system-2.onrender.com
      - key: SOCKET_IO_TRANSPORTS
        value: websocket,polling
      - key: SOCKET_IO_PING_TIMEOUT
        value: 60000
      - key: SOCKET_IO_PING_INTERVAL
        value: 25000
      
      # Configura√ß√µes do MongoDB Atlas
      - key: MONGODB_URI
        sync: false  # Ser√° definida no painel do Render
      - key: MONGO_URI
        sync: false  # Fallback, ser√° definida no painel do Render
      
      # Configura√ß√µes de seguran√ßa
      - key: JWT_SECRET
        sync: false  # Ser√° definida no painel do Render
      
      # ‚ö†Ô∏è IMPORTANTES: Defina estas vari√°veis no painel do Render:
      # MONGODB_URI - String de conex√£o do MongoDB Atlas
      # MONGO_URI - String de conex√£o do MongoDB Atlas (fallback)
      # JWT_SECRET - Chave secreta para JWT (m√≠nimo 32 caracteres)
      # Exemplo: mongodb+srv://user:pass@cluster.mongodb.net/zaradb
    
    # Headers de seguran√ßa
    headers:
      # Prote√ß√£o contra clickjacking
      - path: /*
        name: X-Frame-Options
        value: DENY
      
      # Prote√ß√£o contra MIME sniffing
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      
      # Pol√≠tica de referrer
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
      
      # Pol√≠tica de permiss√µes
      - path: /*
        name: Permissions-Policy
        value: camera=(), microphone=(), geolocation=()
      
      # Seguran√ßa de transporte
      - path: /*
        name: Strict-Transport-Security
        value: max-age=31536000; includeSubDomains
      
      # Cache para assets est√°ticos
      - path: /css/*
        name: Cache-Control
        value: public, max-age=31536000
      
      - path: /js/*
        name: Cache-Control
        value: public, max-age=31536000
      
      - path: /images/*
        name: Cache-Control
        value: public, max-age=31536000

# Configura√ß√µes adicionais para monitoramento
# (Dispon√≠vel em planos pagos)
# alerts:
#   - type: cpu
#     threshold: 80
#   - type: memory
#     threshold: 80
#   - type: response_time
#     threshold: 5000