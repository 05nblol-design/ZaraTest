# Render.com Deploy Configuration
# Zara Quality System - Sistema de Controle de Qualidade

services:
  - type: web
    name: zara-quality-system
    env: node
    plan: free
    region: oregon  # us-west-1 (mais próximo do Brasil)
    buildCommand: |
      echo "🔧 Iniciando build do Zara Quality System..."
      echo "🌍 NODE_ENV: $NODE_ENV"
      echo "📁 Diretório atual: $(pwd)"
      echo "🔧 Node.js version: $(node --version)"
      echo "📦 NPM version: $(npm --version)"
      
      # Instalar dependências do backend
      echo "📦 Instalando dependências do backend..."
      npm ci --only=production
      echo "✅ Backend dependencies installed"
      
      # Build do frontend
      echo "🔧 Building frontend..."
      cd client
      echo "📁 Frontend directory: $(pwd)"
      echo "📋 Listing client directory contents:"
      ls -la
      
      # Verificar se package.json existe
      if [ ! -f "package.json" ]; then
        echo "❌ ERROR: package.json not found in client directory"
        exit 1
      fi
      
      # Instalar dependências do frontend (incluindo devDependencies para build)
      echo "📦 Installing frontend dependencies..."
      npm install
      echo "✅ Frontend dependencies installed"
      
      # Verificar se node_modules foi criado
      if [ ! -d "node_modules" ]; then
        echo "❌ ERROR: node_modules not created, trying npm install"
        npm install
      fi
      
      # Verificar se Vite está disponível
      echo "🔍 Checking Vite installation..."
      if ! npm list vite > /dev/null 2>&1; then
        echo "❌ ERROR: Vite not found in dependencies"
        echo "📦 Installing Vite explicitly..."
        npm install vite@latest
      fi
      echo "✅ Vite is available"
      
      # Executar build com múltiplas tentativas
      echo "🏗️ Running build..."
      echo "📁 Current directory before build: $(pwd)"
      echo "🔧 Node version: $(node --version)"
      echo "📦 NPM version: $(npm --version)"
      
      # Primeira tentativa: npm run build
      echo "🔄 Attempt 1: npm run build"
      if NODE_ENV=production npm run build; then
        echo "✅ npm run build succeeded"
      else
        echo "⚠️ npm run build failed, trying npx vite build"
        if npx vite build; then
          echo "✅ npx vite build succeeded"
        else
          echo "⚠️ npx vite build failed, trying manual vite build"
          if ./node_modules/.bin/vite build; then
            echo "✅ Manual vite build succeeded"
          else
            echo "❌ All build methods failed"
            echo "📋 Package.json scripts:"
            cat package.json | grep -A 10 '"scripts"'
            echo "📋 Node modules vite:"
            ls -la node_modules/.bin/ | grep vite || echo "Vite not found in node_modules/.bin/"
            exit 1
          fi
        fi
      fi
      
      # Debug: listar conteúdo após build
      echo "📋 Directory contents after build:"
      ls -la
      
      # Verificações robustas do build
      echo "🔍 Verifying build output..."
      if [ ! -d "dist" ]; then
        echo "❌ CRITICAL ERROR: dist directory not created"
        echo "📋 Current directory contents:"
        ls -la
        echo "📋 Checking for alternative output directories:"
        find . -name "index.html" -type f 2>/dev/null || echo "No index.html found anywhere"
        exit 1
      fi
      
      echo "📁 dist directory found, checking contents:"
      ls -la dist/
      
      if [ ! -f "dist/index.html" ]; then
        echo "❌ CRITICAL ERROR: index.html not found in dist"
        echo "📋 Contents of dist directory:"
        ls -la dist/
        echo "📋 Searching for index.html in subdirectories:"
        find dist/ -name "index.html" -type f 2>/dev/null || echo "No index.html found in dist/"
        exit 1
      fi
      
      echo "✅ Build verification passed - index.html found in dist/"
      
      # Copiar arquivos do frontend para diretório público
      echo "📁 Copying frontend files to public directory..."
      cd ..
      echo "📁 Back to root directory: $(pwd)"
      
      # Criar diretório public com permissões adequadas
      echo "📁 Creating public directory..."
      rm -rf public 2>/dev/null || true
      mkdir -p public
      chmod 755 public
      echo "📁 Public directory created with proper permissions"
      
      # Verificações robustas antes da cópia
      echo "🔍 Pre-copy verifications..."
      if [ ! -d "client/dist" ]; then
        echo "❌ CRITICAL ERROR: client/dist directory not found"
        echo "📋 Contents of client directory:"
        ls -la client/
        echo "📋 Searching for build output:"
        find client/ -name "index.html" -type f 2>/dev/null || echo "No index.html found in client/"
        exit 1
      fi
      
      if [ ! -f "client/dist/index.html" ]; then
        echo "❌ CRITICAL ERROR: index.html not found in client/dist before copy"
        echo "📋 Contents of client/dist:"
        ls -la client/dist/
        exit 1
      fi
      
      # Múltiplos métodos de cópia com verificação
      echo "📋 Contents of client/dist before copy:"
      ls -la client/dist/
      
      echo "🔄 Attempting copy method 1: cp -r"
      if cp -r client/dist/* public/ 2>/dev/null; then
        echo "✅ Copy method 1 succeeded"
      else
        echo "⚠️ Copy method 1 failed, trying method 2: cp -R"
        if cp -R client/dist/. public/ 2>/dev/null; then
          echo "✅ Copy method 2 succeeded"
        else
          echo "⚠️ Copy method 2 failed, trying method 3: rsync"
          if command -v rsync >/dev/null 2>&1; then
            if rsync -av client/dist/ public/ 2>/dev/null; then
              echo "✅ Copy method 3 (rsync) succeeded"
            else
              echo "⚠️ rsync failed, trying manual file copy"
              find client/dist -type f -exec cp {} public/ \; 2>/dev/null || {
                echo "❌ CRITICAL: All copy methods failed"
                exit 1
              }
              echo "✅ Manual file copy succeeded"
            fi
          else
            echo "⚠️ rsync not available, trying manual file copy"
            find client/dist -type f -exec cp {} public/ \; 2>/dev/null || {
              echo "❌ CRITICAL: Manual copy failed"
              exit 1
            }
            echo "✅ Manual file copy succeeded"
          fi
        fi
      fi
      
      # Verificações pós-cópia robustas
      echo "🔍 Post-copy verifications..."
      echo "📋 Contents of public directory:"
      ls -la public/
      
      if [ ! -f "public/index.html" ]; then
        echo "❌ CRITICAL ERROR: index.html not found in public directory after copy"
        echo "📋 Attempting emergency index.html copy:"
        if [ -f "client/dist/index.html" ]; then
          cp client/dist/index.html public/index.html || {
            echo "❌ CRITICAL: Emergency copy failed"
            exit 1
          }
          echo "✅ Emergency copy succeeded"
        else
          echo "❌ CRITICAL: Source index.html no longer exists"
          exit 1
        fi
      fi
      
      # Verificar conteúdo do index.html
      echo "🔍 Verifying index.html content..."
      if [ -s "public/index.html" ]; then
        echo "✅ index.html exists and has content ($(wc -c < public/index.html) bytes)"
      else
        echo "❌ CRITICAL ERROR: index.html is empty or corrupted"
        exit 1
      fi
      
      echo "✅ Frontend files successfully copied to public directory"
      echo "📂 Final public directory contents:"
      ls -la public/
      echo "🚀 Build process completed successfully - index.html verified"
    startCommand: |
      echo "🚀 Iniciando Zara Quality System..."
      echo "📊 Modo: $NODE_ENV"
      echo "🌐 Porta: $PORT"
      npm start
    healthCheckPath: /
    autoDeploy: true
    
    # Configurações de performance
    numInstances: 1
    
    # Configurações para WebSocket/Socket.IO
    routes:
      - type: rewrite
        source: /socket.io/*
        destination: /socket.io/$1
    
    # Disco persistente para uploads
    disk:
      name: zara-uploads
      mountPath: /opt/render/project/src/uploads
      sizeGB: 1
    
    # Variáveis de ambiente
    envVars:
      # Configurações do servidor
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      
      # Configurações de log
      - key: LOG_LEVEL
        value: info
      
      # Configurações JWT
      - key: JWT_EXPIRES_IN
        value: 24h
      
      # Configurações de upload
      - key: MAX_FILE_SIZE
        value: 5242880  # 5MB
      - key: UPLOAD_PATH
        value: ./uploads
      
      # Configurações CORS
      - key: CORS_ORIGIN
        value: https://zara-quality-system-2.onrender.com
      
      # URL do Frontend
      - key: FRONTEND_URL
        value: https://zara-quality-system-2.onrender.com
      
      # Configurações de cache
      - key: CACHE_TTL
        value: 300  # 5 minutos
      
      # Timezone
      - key: TZ
        value: America/Sao_Paulo
      
      # Configurações do sistema de chat
      - key: CHAT_ENABLED
        value: true
      - key: CHAT_MAX_MESSAGES
        value: 100
      - key: CHAT_MESSAGE_TTL
        value: 86400  # 24 horas
      
      # Configurações Socket.IO
      - key: SOCKET_IO_ENABLED
        value: true
      - key: SOCKET_IO_CORS_ORIGIN
        value: https://zara-quality-system-2.onrender.com
      - key: SOCKET_IO_TRANSPORTS
        value: websocket,polling
      - key: SOCKET_IO_PING_TIMEOUT
        value: 60000
      - key: SOCKET_IO_PING_INTERVAL
        value: 25000
      
      # Configurações do MongoDB Atlas
      - key: MONGODB_URI
        sync: false  # Será definida no painel do Render
      - key: MONGO_URI
        sync: false  # Fallback, será definida no painel do Render
      
      # Configurações de segurança
      - key: JWT_SECRET
        sync: false  # Será definida no painel do Render
      
      # ⚠️ IMPORTANTES: Defina estas variáveis no painel do Render:
      # MONGODB_URI - String de conexão do MongoDB Atlas
      # MONGO_URI - String de conexão do MongoDB Atlas (fallback)
      # JWT_SECRET - Chave secreta para JWT (mínimo 32 caracteres)
      # Exemplo: mongodb+srv://user:pass@cluster.mongodb.net/zaradb
    
    # Headers de segurança
    headers:
      # Proteção contra clickjacking
      - path: /*
        name: X-Frame-Options
        value: DENY
      
      # Proteção contra MIME sniffing
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      
      # Política de referrer
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
      
      # Política de permissões
      - path: /*
        name: Permissions-Policy
        value: camera=(), microphone=(), geolocation=()
      
      # Segurança de transporte
      - path: /*
        name: Strict-Transport-Security
        value: max-age=31536000; includeSubDomains
      
      # Cache para assets estáticos
      - path: /css/*
        name: Cache-Control
        value: public, max-age=31536000
      
      - path: /js/*
        name: Cache-Control
        value: public, max-age=31536000
      
      - path: /images/*
        name: Cache-Control
        value: public, max-age=31536000

# Configurações adicionais para monitoramento
# (Disponível em planos pagos)
# alerts:
#   - type: cpu
#     threshold: 80
#   - type: memory
#     threshold: 80
#   - type: response_time
#     threshold: 5000